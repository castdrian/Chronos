name: Build Chronos
run-name: ${{ inputs.release == true && 'Release' || 'Build' }} for ${{ inputs.ipa_url }}

on:
  workflow_dispatch:
    inputs:
      ipa_url:
        default: ""
        description: "Direct link to the decrypted ipa"
        required: true
        type: string
      release:
        default: true
        description: "Create a GitHub release"
        type: boolean

permissions:
  contents: write

env:
  GH_TOKEN: ${{ github.token }}
  APP_NAME: Audible

jobs:
  build-tweak:
    runs-on: macos-15
    outputs:
      deb_url: ${{ steps.upload-deb.outputs.artifact-url }}
      deb_filename: ${{ steps.set-deb-filename.outputs.filename }}
    env:
      DEB_DOWNLOADED: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Download Tweak
        if: inputs.caller_workflow != 'ci'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 10
          command: |
            set +e

            release_info=$(gh api --header 'Accept: application/vnd.github+json' repos/${{ github.repository }}/releases/latest)
            status_code=$(echo $release_info | jq -r ".status")

            if [ "$status_code" != "null" ]; then
              echo "No releases found or request failed, status code: $status_code"
              echo "DEB_DOWNLOADED=false" >> $GITHUB_ENV
              exit 0
            fi

            set -e

            release_version=$(echo "$release_info" | jq -r '.assets[] | select(.name | contains("iphoneos-arm64.deb")) | .name' | grep -o '_[0-9.]\+_' | tr -d '_')
            control_version=$(grep '^Version:' control | cut -d ' ' -f 2)

            if [ "$release_version" = "$control_version" ]; then
              echo "Versions match. Downloading DEB files..."
              mkdir -p packages
              cd packages
              echo "$release_info" | jq -r '.assets[] | select(.name | endswith("arm64.deb")) | .browser_download_url' | xargs -I {} curl -L -O {}
              echo "DEB_DOWNLOADED=true" >> $GITHUB_ENV
            else
              echo "Versions do not match. No files will be downloaded."
              echo "DEB_DOWNLOADED=false" >> $GITHUB_ENV
              exit 0
            fi

      - name: Check cache
        if: env.DEB_DOWNLOADED == 'false'
        run: echo upstream_heads=`git ls-remote https://github.com/theos/theos | head -n 1 | cut -f 1`-`git ls-remote https://github.com/theos/sdks | head -n 1 | cut -f 1` >> $GITHUB_ENV

      - name: Use cache
        if: env.DEB_DOWNLOADED == 'false'
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/theos
          key: ${{ runner.os }}-${{ env.upstream_heads }}

      - name: Prepare Theos
        if: env.DEB_DOWNLOADED == 'false'
        uses: Randomblock1/theos-action@v1

      - name: Build package
        if: env.DEB_DOWNLOADED == 'false'
        run: gmake package

      - name: Upload rootless package
        id: upload-deb
        uses: actions/upload-artifact@v4
        with:
          name: rootless package
          path: packages/*.deb

      - name: Set deb filename
        id: set-deb-filename
        run: |
          DEB_FILE=$(ls packages/*.deb)
          DEB_FILENAME=$(basename "$DEB_FILE")
          echo "filename=$DEB_FILENAME" >> $GITHUB_OUTPUT

  build-ipa:
    runs-on: macos-15
    needs: build-tweak
    outputs:
      ipa_url: ${{ steps.upload-ipa.outputs.artifact-url }}
      ipa_filename: ${{ steps.set-ipa-filename.outputs.filename }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Select Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          merge-multiple: true

      - name: Download Audible ipa
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 15
          command: curl -L -o audible.ipa ${{ inputs.ipa_url }}

      - name: Install cyan
        run: pip install --force-reinstall https://github.com/asdfzxcvbn/pyzule-rw/archive/main.zip Pillow

      - name: Inject tweak
        run:  yes | cyan -duwsgq -i audible.ipa -o ${{ env.APP_NAME }}.ipa -f *.deb

      - name: Upload ipa as artifact
        id: upload-ipa
        uses: actions/upload-artifact@v4
        with:
          name: ipa
          path: ${{ env.APP_NAME }}.ipa

      - name: Set ipa filename
        id: set-ipa-filename
        run: echo "filename=${{ env.APP_NAME }}.ipa" >> $GITHUB_OUTPUT

  release-app:
    if: inputs.caller_workflow != 'ci' && inputs.release == true
    runs-on: macos-15
    needs: [build-tweak, build-ipa]
    outputs:
      assets: ${{ steps.release_outputs.outputs.assets }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          merge-multiple: true

      - name: Extract Audible Version
        run: |
          unzip -q *.ipa
          VERSION=$(plutil -p Payload/Audible.app/Info.plist | grep CFBundleShortVersionString | cut -d '"' -f 4)
          echo "AUDIBLE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.AUDIBLE_VERSION }}
          files: |
            ${{ needs.build-tweak.outputs.deb_filename }}
            ${{ needs.build-ipa.outputs.ipa_filename }}
          generate_release_notes: true
          fail_on_unmatched_files: true
          token: ${{ env.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set release outputs
        id: release_outputs
        run: |
          RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/v${{ env.AUDIBLE_VERSION }} | jq -r '.id')
          ASSETS=$(gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets)
          echo "assets=$ASSETS" >> $GITHUB_OUTPUT

  app-repo:
    if: inputs.caller_workflow != 'ci' && inputs.release == true
    continue-on-error: true
    runs-on: macos-15
    needs: release-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download ipa artifact
        uses: actions/download-artifact@v5
        with:
          name: ipa

      - name: Update app-repo.json
        run: |
          APP_FILE=$(ls *.ipa)
          unzip -q "$APP_FILE"
          VERSION=$(plutil -p Payload/Audible.app/Info.plist | grep CFBundleShortVersionString | cut -d '"' -f 4)
          APP_INDEX=0

          NAME=$(grep '^Name:' control | cut -d ' ' -f 2)
          DATE=$(date -u +"%Y-%m-%d")
          IPA_SIZE=$(stat -f %z "$APP_FILE")
          DOWNLOAD_URL=https://github.com/${{ github.repository }}/releases/download/v$VERSION/$NAME.ipa
          NEW_ENTRY=$(jq -n --arg version "$VERSION" --arg date "$DATE" --arg size "$IPA_SIZE" --arg downloadURL "$DOWNLOAD_URL" '{version: $version, date: $date, size: ($size | tonumber), downloadURL: $downloadURL, localizedDescription: "Further improvements to overall system stability and other minor adjustments have been made to enhance the user experience."}')
          
          VERSION_EXISTS=$(jq --arg version "$VERSION" --argjson index "$APP_INDEX" '.apps[$index].versions | map(select(.version == $version)) | length' app-repo.json)
          if [ "$VERSION_EXISTS" -gt 0 ]; then
            jq --argjson newEntry "$NEW_ENTRY" --argjson index "$APP_INDEX" --arg version "$VERSION" '.apps[$index].versions |= map(if .version == $version then $newEntry else . end)' app-repo.json > temp.json
          else
            jq --argjson newEntry "$NEW_ENTRY" --argjson index "$APP_INDEX" '.apps[$index].versions |= [$newEntry] + .' app-repo.json > temp.json
          fi
          mv temp.json app-repo.json

      - uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          message: "chore: update app-repo.json"
          add: app-repo.json

  apt-repo:
    if: inputs.caller_workflow != 'ci' && inputs.release == true
    runs-on: macos-15
    needs: [build-tweak, release-app]
    steps:
      - name: Update Repository
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            const assets = JSON.parse('${{ needs.release-app.outputs.assets }}');
            const debAsset = assets.find(asset => asset.name === '${{ needs.build-tweak.outputs.deb_filename }}');

            if (!debAsset) {
              core.setFailed('Could not find DEB asset in release');
              return;
            }
            
            await github.rest.repos.createDispatchEvent({
              owner: 'castdrian',
              repo: 'apt-repo',
              event_type: 'package-update',
              client_payload: {
                package_url: debAsset.browser_download_url,
                package_name: '${{ needs.build-tweak.outputs.deb_filename }}'
              }
            });
