name: Build Chronos
run-name: >-
    ${{ github.event_name == 'push' && 'Push Build' || (inputs.release == true && 'Release' || 'Build') }}

on:
    push:
        branches: [main]
    workflow_dispatch:
        inputs:
            ipa_url:
                default: "https://files.catbox.moe/h968or.ipa"
                description: "Direct link to the decrypted ipa"
                required: true
                type: string
            release:
                default: true
                description: "Create a GitHub release"
                type: boolean

permissions:
    contents: write

env:
    GH_TOKEN: ${{ github.token }}

jobs:
    precheck:
        runs-on: macos-15
        outputs:
            should_run: ${{ steps.version-check.outputs.should_run }}
            do_release: ${{ steps.version-check.outputs.do_release }}
            ipa_url: ${{ steps.set-ipa-url.outputs.ipa_url }}
            reuse_deb: ${{ steps.version-check.outputs.reuse_deb }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Set IPA URL (dispatch or default)
              id: set-ipa-url
              run: echo "ipa_url=${{ inputs.ipa_url || 'https://files.catbox.moe/h968or.ipa' }}" >> $GITHUB_OUTPUT

            - name: Compare tweak version with latest release
              id: version-check
              env:
                  GH_TOKEN: ${{ github.token }}
              run: |
                  CONTROL_VERSION=$(grep '^Version:' control | cut -d ' ' -f 2)
                  SHOULD_RUN=true
                  DO_RELEASE=false
                  REUSE_DEB=false
                  # Fetch latest release (if any) once
                  set +e
                  release_json=$(gh api repos/${{ github.repository }}/releases/latest 2>/dev/null)
                  rc=$?
                  set -e
                  RELEASE_VERSION=""
                  if [ $rc -eq 0 ]; then
                    asset_name=$(echo "$release_json" | jq -r '.assets[] | select(.name | contains("iphoneos-arm64.deb")) | .name' | head -n1)
                    if [ -n "$asset_name" ]; then
                      RELEASE_VERSION=$(echo "$asset_name" | grep -o '_[0-9.]\+_' | tr -d '_')
                    fi
                  fi

                  if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                    # For manual dispatch we may want to reuse existing DEB if version matches
                    if [ -n "$RELEASE_VERSION" ] && [ "$RELEASE_VERSION" = "$CONTROL_VERSION" ]; then
                      REUSE_DEB=true
                    fi
                    if [ "${{ inputs.release }}" = "true" ]; then DO_RELEASE=true; fi
                  else
                    # push event logic: skip entire build if version already released
                    if [ -n "$RELEASE_VERSION" ] && [ "$RELEASE_VERSION" = "$CONTROL_VERSION" ]; then
                      echo "Latest release version ($RELEASE_VERSION) matches control ($CONTROL_VERSION); skipping build on push.";
                      SHOULD_RUN=false
                    else
                      DO_RELEASE=true
                    fi
                  fi
                  echo "should_run=$SHOULD_RUN" >> $GITHUB_OUTPUT
                  echo "do_release=$DO_RELEASE" >> $GITHUB_OUTPUT
                  echo "reuse_deb=$REUSE_DEB" >> $GITHUB_OUTPUT
                  echo "Control version: $CONTROL_VERSION (release? $DO_RELEASE, run? $SHOULD_RUN)"

    build-tweak:
        runs-on: macos-15
        needs: precheck
        if: needs.precheck.outputs.should_run == 'true'
        outputs:
            deb_url: ${{ steps.upload-deb.outputs.artifact-url }}
            deb_filename: ${{ steps.set-deb-filename.outputs.filename }}
        env:
            DEB_DOWNLOADED: false

        steps:
            - name: Checkout code
              uses: actions/checkout@v5
              with:
                  submodules: recursive

            - name: Reuse existing DEB from latest release
              if: needs.precheck.outputs.reuse_deb == 'true'
              run: |
                  echo "Reusing existing release assets (version matches control)."
                  release_info=$(gh api --header 'Accept: application/vnd.github+json' repos/${{ github.repository }}/releases/latest)
                  mkdir -p packages
                  cd packages
                  echo "$release_info" | jq -r '.assets[] | select(.name | endswith("arm64.deb")) | .browser_download_url' | while read url; do
                    [ -n "$url" ] && curl -L -O "$url";
                  done
                  echo "DEB_DOWNLOADED=true" >> $GITHUB_ENV

            - name: Check cache
              if: env.DEB_DOWNLOADED == 'false'
              run: echo upstream_heads=`git ls-remote https://github.com/theos/theos | head -n 1 | cut -f 1`-`git ls-remote https://github.com/theos/sdks | head -n 1 | cut -f 1` >> $GITHUB_ENV

            - name: Use cache
              if: env.DEB_DOWNLOADED == 'false'
              id: cache
              uses: actions/cache@v4
              with:
                  path: ${{ github.workspace }}/theos
                  key: ${{ runner.os }}-${{ env.upstream_heads }}

            - name: Prepare Theos
              if: env.DEB_DOWNLOADED == 'false'
              uses: Randomblock1/theos-action@v1

            - name: Build package
              if: env.DEB_DOWNLOADED == 'false'
              run: gmake package

            - name: Upload rootless package
              id: upload-deb
              uses: actions/upload-artifact@v5
              with:
                  name: rootless package
                  path: packages/*.deb

            - name: Set deb filename
              id: set-deb-filename
              run: |
                  DEB_FILE=$(ls packages/*.deb)
                  DEB_FILENAME=$(basename "$DEB_FILE")
                  echo "filename=$DEB_FILENAME" >> $GITHUB_OUTPUT

    build-ipa:
        runs-on: macos-15
        needs: [precheck, build-tweak]
        if: needs.precheck.outputs.should_run == 'true'
        outputs:
            ipa_url: ${{ steps.upload-ipa.outputs.artifact-url }}
            ipa_filename: ${{ steps.set-ipa-filename.outputs.filename }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v5
              with:
                  submodules: recursive

            - name: Select Xcode Version
              uses: maxim-lobanov/setup-xcode@v1
              with:
                  xcode-version: "16.4"

            - name: Download build artifacts
              uses: actions/download-artifact@v6
              with:
                  merge-multiple: true

            - name: Extract app name
              run: |
                  NAME=$(grep '^Name:' control | cut -d ' ' -f 2)
                  echo "APP_NAME=$NAME" >> $GITHUB_ENV

            - name: Download Audible ipa
              uses: nick-fields/retry@v3
              with:
                  timeout_minutes: 10
                  max_attempts: 3
                  retry_wait_seconds: 15
                  command: curl -L -o audible.ipa ${{ needs.precheck.outputs.ipa_url }}

            - name: Install cyan
              run: pip install --force-reinstall https://github.com/asdfzxcvbn/pyzule-rw/archive/main.zip Pillow

            - name: Inject tweak
              run: yes | cyan -duwsgq -i audible.ipa -o ${{ env.APP_NAME }}.ipa -f *.deb

            - name: Upload ipa as artifact
              id: upload-ipa
              uses: actions/upload-artifact@v5
              with:
                  name: ipa
                  path: ${{ env.APP_NAME }}.ipa

            - name: Set ipa filename
              id: set-ipa-filename
              run: echo "filename=${{ env.APP_NAME }}.ipa" >> $GITHUB_OUTPUT

    release-app:
        if: needs.precheck.outputs.do_release == 'true'
        runs-on: macos-15
        needs: [precheck, build-tweak, build-ipa]
        outputs:
            assets: ${{ steps.release_outputs.outputs.assets }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Download build artifacts
              uses: actions/download-artifact@v6
              with:
                  merge-multiple: true

            - name: Extract Audible Version
              run: |
                  unzip -q *.ipa
                  VERSION=$(plutil -p Payload/Audible.app/Info.plist | grep CFBundleShortVersionString | cut -d '"' -f 4)
                  echo "AUDIBLE_VERSION=$VERSION" >> $GITHUB_ENV

            - name: Delete existing release/tag
              id: delete_existing
              env:
                  GH_TOKEN: ${{ github.token }}
              run: |
                  set +e
                  existing=$(gh release view v${{ env.AUDIBLE_VERSION }} --json id,tagName 2>/dev/null)
                  rc=$?
                  set -e
                  if [ $rc -eq 0 ]; then
                    rid=$(echo "$existing" | jq -r '.id')
                    echo "Found existing release for version ${AUDIBLE_VERSION} (id $rid); deleting..."
                    gh release delete v${AUDIBLE_VERSION} -y || true
                    git push origin :refs/tags/v${AUDIBLE_VERSION} || true
                  else
                    echo "No existing release/tag for v${AUDIBLE_VERSION}";
                  fi

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: v${{ env.AUDIBLE_VERSION }}
                  files: |
                      ${{ needs.build-tweak.outputs.deb_filename }}
                      ${{ needs.build-ipa.outputs.ipa_filename }}
                  generate_release_notes: true
                  fail_on_unmatched_files: true
                  token: ${{ env.GITHUB_TOKEN }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Set release outputs
              id: release_outputs
              run: |
                  RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/v${{ env.AUDIBLE_VERSION }} | jq -r '.id')
                  ASSETS=$(gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets)
                  echo "assets=$ASSETS" >> $GITHUB_OUTPUT

    app-repo:
        if: needs.precheck.outputs.do_release == 'true'
        continue-on-error: true
        runs-on: macos-15
        needs: [precheck, release-app]
        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Download ipa artifact
              uses: actions/download-artifact@v6
              with:
                  name: ipa

            - name: Update app-repo.json
              run: |
                  APP_FILE=$(ls *.ipa)
                  unzip -q "$APP_FILE"
                  VERSION=$(plutil -p Payload/Audible.app/Info.plist | grep CFBundleShortVersionString | cut -d '"' -f 4)
                  APP_INDEX=0

                  NAME=$(grep '^Name:' control | cut -d ' ' -f 2)
                  DATE=$(date -u +"%Y-%m-%d")
                  IPA_SIZE=$(stat -f %z "$APP_FILE")
                  DOWNLOAD_URL=https://github.com/${{ github.repository }}/releases/download/v$VERSION/$NAME.ipa
                  NEW_ENTRY=$(jq -n --arg version "$VERSION" --arg date "$DATE" --arg size "$IPA_SIZE" --arg downloadURL "$DOWNLOAD_URL" '{version: $version, date: $date, size: ($size | tonumber), downloadURL: $downloadURL, localizedDescription: "Further improvements to overall system stability and other minor adjustments have been made to enhance the user experience."}')

                  VERSION_EXISTS=$(jq --arg version "$VERSION" --argjson index "$APP_INDEX" '.apps[$index].versions | map(select(.version == $version)) | length' app-repo.json)
                  if [ "$VERSION_EXISTS" -gt 0 ]; then
                    echo "Version $VERSION already present in app-repo.json – skipping update.";
                    exit 0
                  fi
                  jq --argjson newEntry "$NEW_ENTRY" --argjson index "$APP_INDEX" '.apps[$index].versions |= [$newEntry] + .' app-repo.json > temp.json
                  mv temp.json app-repo.json

            - uses: EndBug/add-and-commit@v9
              with:
                  default_author: github_actions
                  message: "chore: update app-repo.json"
                  add: app-repo.json

    apt-repo:
        if: needs.precheck.outputs.do_release == 'true'
        runs-on: macos-15
        needs: [precheck, build-tweak, release-app]
        steps:
            - name: Update Repository
              uses: actions/github-script@v8
              with:
                  github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
                  script: |
                      const assets = JSON.parse('${{ needs.release-app.outputs.assets }}');
                      const debAsset = assets.find(asset => asset.name === '${{ needs.build-tweak.outputs.deb_filename }}');

                      if (!debAsset) {
                        core.setFailed('Could not find DEB asset in release');
                        return;
                      }

                      await github.rest.repos.createDispatchEvent({
                        owner: 'castdrian',
                        repo: 'apt-repo',
                        event_type: 'package-update',
                        client_payload: {
                          package_url: debAsset.browser_download_url,
                          package_name: '${{ needs.build-tweak.outputs.deb_filename }}'
                        }
                      });
